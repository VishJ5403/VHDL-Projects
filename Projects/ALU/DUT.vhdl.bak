-- A DUT entity is used to wrap your design.
--  This example shows how you can do this for the
--  Minvow.

library ieee;
use ieee.std_logic_1164.all;
entity DUT is
   port(input_vector: in std_logic_vector(9 downto 0);
       	output_vector: out std_logic_vector(7 downto 0));
end entity;

architecture DutWrap of DUT is
   component ALU is
     port (
        A: in std_logic_vector(operand_width-1 downto 0);
        B: in std_logic_vector(operand_width-1 downto 0);
        sel: in std_logic_vector(sel_line-1 downto 0);
        op: out std_logic_vector((operand_width*2)-1 downto 0)
          ) ;
   end component ALU;
begin

   -- input/output vector element ordering is critical,
   -- and must match the ordering in the trace file!
   add_instance: ALU
         generic map(
               operand_width =>4;
               sel_line =>2
                     );	
			port map (
					-- order of inputs D C B A
					sel(sel_line-1 downto 0)    => input_vector(9 downto 8),
					A(operand_width-1 downto 0) => input_vector(7 downto 4),
					B(operand_width-1 downto 0) => input_vector(3 downto 0),
					
                                        -- order of outputs Y
					op((operand_width*2)-1 downto 0) => output_vector(7 downto 0));
					
end DutWrap;

